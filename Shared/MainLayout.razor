@inherits LayoutComponentBase
<MudRTLProvider RightToLeft="@_rightToLeft">
    <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="MyCustomTheme" />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())" />
            <MudSpacer />
            @if (_isDarkMode)
            {
                <MudIconButton Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit" OnClick="@(async (e) => await DoLightMode())" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.DarkMode" Color="Color.Inherit" OnClick="@(async (e) => await DoDarkMode())" />
            }
            <MudIconButton  Variant="Variant.Text" Icon="@Icons.Material.Filled.ImportExport" OnClick="@ToggleDirection">@(_rightToLeft ? "RTL" : "LTR")</MudIconButton>

            <MudIconButton Icon="@Icons.Custom.Brands.Telegram" Color="Color.Inherit" Href="https://telegram.me/sabzi_khoreshti" Target="_blank" />
        </MudAppBar>
    
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large" Class="my-40 pt-40">
                @if (LoadingForFirstLoad)
                {
                    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">
                        <MudProgressLinear Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
                    </MudPaper>
                    <MudCard>
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px"/>
                        <MudCardContent>
                            <MudSkeleton Width="30%" Height="42px;" />
                            <MudSkeleton Width="80%" />
                            <MudSkeleton Width="100%" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                        </MudCardActions>
                    </MudCard>
                 
                }
                else
                {
                    @Body
                }
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</MudRTLProvider>

@inject IJSRuntime JSRuntime

@code {

    readonly MudTheme MyCustomTheme = new()
        {
            Typography = new Typography
            {
                Default = new Default
                {
                    FontFamily = new[] { "vazir", "Helvetica", "Arial", "sans-serif" }
                }
            }
        };

    bool _drawerOpen;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private bool _isDarkMode = true;

    private bool _rightToLeft = false;
    async Task DoDarkMode()
    {
        try
        {
            _isDarkMode = true;
            await localStorage.SetItemAsync("DarkMode", _isDarkMode);
        }
        catch
        {
            // ignored
        }
    }
    private bool LoadingForFirstLoad = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {

                var resRTL = await localStorage.GetItemAsync<string>("rtlStatus");
                if (resRTL is null)
                {
                    await localStorage.SetItemAsync("rtlStatus", true);
                    resRTL = await localStorage.GetItemAsync<string>("rtlStatus");
                }
                _rightToLeft = Convert.ToBoolean(resRTL);
                var isDarkMode = await GetDarkModeStatus();
                _isDarkMode = isDarkMode;
                LoadingForFirstLoad = false;
            
                StateHasChanged();
            }
        }
        catch
        {
            LoadingForFirstLoad = false;
            StateHasChanged();
             // ignored
        }
    }

    async Task DoLightMode()
    {
        try
        {
            _isDarkMode = false;
            await localStorage.SetItemAsync("DarkMode", _isDarkMode);
        }
        catch
        {
            // ignored
        }
    }

    private async Task<bool> GetDarkModeStatus()
    {
        try
        {
            var result = await localStorage.GetItemAsync<string>("DarkMode");
            if (result is null)
            {
                await localStorage.SetItemAsync("DarkMode", true);
                result = await localStorage.GetItemAsync<string>("DarkMode");
            }
            return result.ToLower() == "true";
        }
        catch
        {
            return _isDarkMode=true;
        }
    }

    //RTLSTATUS
    void ToggleDirection()
    {
        try
        {
            _rightToLeft = !_rightToLeft;
            localStorage.SetItemAsync("rtlStatus", _rightToLeft);
        }
        catch
        {
            // ignored
        }
    }

}